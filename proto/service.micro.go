// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/service.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	proto/service.proto

It has these top-level messages:
	EmptyRequest
	VersionResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CIService service

type CIService interface {
	Version(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*VersionResponse, error)
}

type cIService struct {
	c    client.Client
	name string
}

func NewCIService(name string, c client.Client) CIService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "daemon.proto"
	}
	return &cIService{
		c:    c,
		name: name,
	}
}

func (c *cIService) Version(ctx context.Context, in *EmptyRequest, opts ...client.CallOption) (*VersionResponse, error) {
	req := c.c.NewRequest(c.name, "CIService.Version", in)
	out := new(VersionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CIService service

type CIServiceHandler interface {
	Version(context.Context, *EmptyRequest, *VersionResponse) error
}

func RegisterCIServiceHandler(s server.Server, hdlr CIServiceHandler, opts ...server.HandlerOption) error {
	type cIService interface {
		Version(ctx context.Context, in *EmptyRequest, out *VersionResponse) error
	}
	type CIService struct {
		cIService
	}
	h := &cIServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CIService{h}, opts...))
}

type cIServiceHandler struct {
	CIServiceHandler
}

func (h *cIServiceHandler) Version(ctx context.Context, in *EmptyRequest, out *VersionResponse) error {
	return h.CIServiceHandler.Version(ctx, in, out)
}
